<?php

namespace common\models;

use Yii;
use yii\base\Model;
use yii\data\ActiveDataProvider;
use common\models\Post;

/**
 * PostSearch represents the model behind the search form about `common\models\Post`.
 */
class PostSearch extends Post
{
    /**
     * @inheritdoc
     */
    //增加属性authorName属性到PostSearch类中
    public function attributes()
    {
        //用array_merge合并新的authorName属性并返回
        return array_merge(parent::attributes(),['authorName']);//parent::attributes(); // TODO: Change the autogenerated stub
    }

    public function rules()
    {
        //验证规则
        return [
            [['id', 'status', 'create_time', /*'update_time',*/ 'author_id'], 'integer'],
            [['title', 'content', 'tags','authorName','update_time'], 'safe'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function scenarios()
    {
        // bypass scenarios() implementation in the parent class
        return Model::scenarios();
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params)
    {
        $query = Post::find();

        // add conditions that should always apply here

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            //设置分页并赋值一页显示行数
            'pagination'=>['pageSize'=>6],
            //设置默认排序
            'sort'=>[
                'defaultOrder'=>['update_time'=>SORT_DESC,]],
        ]);

        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->where('0=1');
            return $dataProvider;
        }

        // grid filtering conditions
        $query->andFilterWhere([
            'id' => $this->id,
            'status' => $this->status,
            'create_time' => $this->create_time,
            //注销原来的直接输入timestamp的搜索方式
            //'update_time' => $this->update_time,
            'author_id' => $this->author_id,
        ]);

        $query->andFilterWhere(['like', 'title', $this->title])
            ->andFilterWhere(['like', 'content', $this->content])
            ->andFilterWhere(['like', 'tags', $this->tags])
            //添加update_time的可对应日期格式搜索
            ->andFilterWhere(['like','FROM_UNIXTIME(post.update_time,\'%Y-%m-%d %h-%i-%s\')',$this->update_time]);

        //添加author_id的对应表Administrator表中取出name的值
        $query->join('inner join','adminUser','post.author_id = adminUser.id');
        $query->andFilterWhere(['like','Adminuser.nickname',$this->authorName]);


        //设置autorName的排序方式，设置正反序排序
        $dataProvider->sort->attributes['authorName']=
            [
            'asc'=>['Adminuser.nickname'=>SORT_ASC,],
            'desc'=>['Adminuser.nickname'=>SORT_DESC,],
        ];

        return $dataProvider;
    }
}
