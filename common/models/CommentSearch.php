<?php

namespace common\models;

use Yii;
use yii\base\Model;
use yii\data\ActiveDataProvider;
use common\models\Comment;

/**
 * CommentSearch represents the model behind the search form about `common\models\Comment`.
 */
class CommentSearch extends Comment
{
    public function attributes()
    {
        //return parent::attributes(); // TODO: Change the autogenerated stub
        return array_merge(parent::attributes(),['authorName','title']);
    }
    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['id', 'status', 'post_id'], 'integer'],
            [['content', 'email', 'url','create_time','authorName','title'], 'safe'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function scenarios()
    {
        // bypass scenarios() implementation in the parent class
        return Model::scenarios();
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params)
    {
        $query = Comment::find();

        // add conditions that should always apply here

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'pagination'=>['pageSize'=>6],
            //设置默认排序
            'sort'=>[
                'defaultOrder'=>['status'=>SORT_ASC,
                                    'id' => SORT_DESC,]],
        ]);

        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->where('0=1');
            return $dataProvider;

        }

        // grid filtering conditions
        $query->andFilterWhere([
            'id' => $this->id,
            'comment.status' => $this->status,
            //'create_time' => $this->create_time,
            'userid' => $this->userid,
            'post_id' => $this->post_id,
        ]);

        $query->andFilterWhere(['like', 'content', $this->content])
            ->andFilterWhere(['like', 'email', $this->email])
            ->andFilterWhere(['like', 'url', $this->url])
            //添加update_time的可对应日期格式搜索
            ->andFilterWhere(['like','FROM_UNIXTIME(comment.create_time,\'%Y-%m-%d %h-%i-%s\')',$this->create_time]);

        $query->join('inner join','user','comment.userid=user.id');
        $query->andFilterWhere(['like','user.username', $this->authorName]);

        $dataProvider->sort->attributes['authorName']=
            [
                'asc'=>['user.username'=>SORT_ASC,],
                'desc'=>['user.username'=>SORT_DESC,],
            ];

        $query->join('inner join','post','comment.post_id=post.id');
        $query->andFilterWhere(['like','post.title',$this->title]);

        $dataProvider->sort->attributes['title']=
            [
                'asc'=>['post.title' => SORT_ASC],
                'desc'=>['post.title' => SORT_DESC],
            ];

        return $dataProvider;
    }
}
